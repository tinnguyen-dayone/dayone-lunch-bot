name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/dayone-lunch-bot:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
        run: |
          ssh ubuntu@$SSH_HOST << 'EOF'
            if ! command -v docker &> /dev/null
            then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker ubuntu
              newgrp docker
            fi

            # Ensure Docker Compose is installed
            if ! command -v docker-compose &> /dev/null
            then
              sudo curl -L "https://github.com/docker/compose/releases/download/2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Log in to GitHub Container Registry
            echo "${GHCR_PAT}" | docker login ghcr.io -u tinnguyen-dayone --password-stdin

            # Pull the latest Docker image from GHCR
            docker pull ghcr.io/tinnguyen-dayone/dayone-lunch-bot:latest

            # Stop existing containers if any
            cd ~/discord-bot || mkdir ~/discord-bot && cd ~/discord-bot
            docker-compose down || true

            # Update docker-compose.yml to use the pulled image
            sed -i 's|image: .*|image: ghcr.io/tinnguyen-dayone/dayone-lunch-bot:latest|' docker-compose.yml

            # Start the service using Docker Compose
            docker-compose up -d --pull always
          EOF

      - name: Verify Deployment
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 20
          ssh ubuntu@$SSH_HOST 'docker-compose ps'
