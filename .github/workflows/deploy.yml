name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/dayone-lunch-bot:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DB_URL: ${{ secrets.DB_URL }}
          LUNCH_PRICE: ${{ secrets.LUNCH_PRICE }}
        run: |
          ssh -tt ubuntu@$SSH_HOST << EOF
            set -e  # Exit immediately if a command exits with a non-zero status

            # Install Git if not available
            if ! command -v git &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y git
            fi

            # Ensure the directory is a git repository
            if [ ! -d ~/discord-bot/.git ]; then
              rm -rf ~/discord-bot
              git clone https://github.com/tinnguyen-dayone/dayone-lunch-bot.git ~/discord-bot
            else
              cd ~/discord-bot
              git pull
            fi

            if ! command -v docker &> /dev/null
            then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker ubuntu
              newgrp docker
            fi

            # Ensure Docker Compose is installed correctly
            if ! command -v docker-compose &> /dev/null
            then
              sudo curl -L "https://github.com/docker/compose/releases/download/2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              # Verify installation
              docker-compose --version
            fi

            # Create .env file with environment variables
            echo "DISCORD_TOKEN=${DISCORD_TOKEN}" > ~/discord-bot/.env
            echo "DB_URL=${DB_URL}" >> ~/discord-bot/.env
            echo "LUNCH_PRICE=${LUNCH_PRICE}" >> ~/discord-bot/.env

            # Log in to GitHub Container Registry with non-interactive login
            echo "${GHCR_PAT}" | docker login ghcr.io -u tinnguyen-dayone --password-stdin

            # Pull the latest Docker image from GHCR
            docker pull ghcr.io/tinnguyen-dayone/dayone-lunch-bot:latest

            # Navigate to the project directory
            cd ~/discord-bot || { mkdir ~/discord-bot && cd ~/discord-bot; }

            # Ensure docker-compose.yml exists
            if [ ! -f docker-compose.yml ]; then
              echo "docker-compose.yml not found in ~/discord-bot directory."
              exit 1
            fi

            # Stop existing containers if any
            docker-compose down || true


            # Start the service using Docker Compose
            docker-compose up -d --pull always
          EOF

      - name: Verify Deployment
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 20
          ssh ubuntu@$SSH_HOST 'docker-compose ps'
