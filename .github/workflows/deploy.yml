name: Deploy to EC2

on:
  push:
    branches: [main]

env:
  REGISTRY: ghcr.io
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_package: ${{ steps.image-package.outputs.image_package }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}

      - name: Set IMAGE_PACKAGE
        id: image-package
        run: |
          echo "image_package=${{ steps.meta.outputs.tags }}-${{ github.sha }}" >> "$GITHUB_OUTPUT"
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.image-package.outputs.image_package }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DB_URL: ${{ secrets.DB_URL }}
          LUNCH_PRICE: ${{ secrets.LUNCH_PRICE }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          ENVIRONMENT: production
        run: |
          # Create deployment script
          cat > deploy.sh << 'EOL'
          #!/bin/bash
          set -e
            
          # Install Git if not available
          if ! command -v git &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y git
          fi

          # Configure Git to use token authentication
          git config --global credential.helper store
          echo "https://${GITHUB_TOKEN}@github.com" > ~/.git-credentials

          # Stop and remove existing container if it exists
          if docker ps -a | grep -q dayone-lunch-bot; then
            docker stop dayone-lunch-bot || true
            docker rm dayone-lunch-bot || true
          fi

          # Setup repository
          if [ ! -d ~/discord-bot/.git ]; then
            rm -rf ~/discord-bot
            git clone https://oauth2:${GITHUB_TOKEN}@github.com/tinnguyen-dayone/dayone-lunch-bot.git ~/discord-bot
          else
            cd ~/discord-bot
            git pull
          fi
          EOL
          # Append environment-specific part
          cat >> deploy.sh << EOF
          # Create .env file
          cat > .env << ENVEOF
          DISCORD_TOKEN=${DISCORD_TOKEN}
          DB_URL=${DB_URL}
          LUNCH_PRICE=${LUNCH_PRICE}
          SENTRY_DSN=${SENTRY_DSN}
          ENVIRONMENT=${ENVIRONMENT}
          ENVEOF
          # Deploy bot container
          docker run -d \
            --name dayone-lunch-bot \
            --network lunch-network \
            -v \$(pwd)/.env:/app/.env \
            --restart on-failure \
            ${{ needs.build-and-push.outputs.image_package }}
          # Verify container is running
          docker ps | grep dayone-lunch-bot || exit 1
          EOF
          chmod +x deploy.sh
          # Pass GHCR_PAT as GITHUB_TOKEN to the remote script
          scp deploy.sh ubuntu@$SSH_HOST:~/deploy.sh
          ssh ubuntu@$SSH_HOST "GITHUB_TOKEN=$GHCR_PAT bash ~/deploy.sh && rm ~/deploy.sh"
      - name: Verify Deployment
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 10
          ssh ubuntu@$SSH_HOST 'docker ps | grep -q dayone-lunch-bot'
