name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/dayone-lunch-bot:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
          GHCR_PAT: ${{ secrets.GHCR_PAT }}
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          DB_URL: ${{ secrets.DB_URL }}
          LUNCH_PRICE: ${{ secrets.LUNCH_PRICE }}
        run: |
          ssh -tt ubuntu@$SSH_HOST << EOF
            set -e  # Exit immediately if a command exits with a non-zero status

            # Install Git if not available
            if ! command -v git &> /dev/null
            then
              sudo apt-get update
              sudo apt-get install -y git
            fi

            # Ensure the directory is a git repository
            if [ ! -d ~/discord-bot/.git ]; then
              rm -rf ~/discord-bot
              git clone https://github.com/tinnguyen-dayone/dayone-lunch-bot.git ~/discord-bot
            else
              cd ~/discord-bot
              git pull
            fi

            if ! command -v docker &> /dev/null
            then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sh get-docker.sh
              sudo usermod -aG docker ubuntu
              newgrp docker
            fi

            # Start the Docker container without using Docker Compose
            # Remove any existing container
            docker rm -f dayone-lunch-bot || true

            # Pull the latest Docker image
            docker pull ghcr.io/tinnguyen-dayone/dayone-lunch-bot:latest

            # Run the new container
            docker run -d \
              --name dayone-lunch-bot \
              --env DISCORD_TOKEN=${DISCORD_TOKEN} \
              --env DB_URL=${DB_URL} \
              --env LUNCH_PRICE=${LUNCH_PRICE} \
              --restart on-failure \
              ghcr.io/tinnguyen-dayone/dayone-lunch-bot:latest

            exit 0
          EOF
        continue-on-error: false # Ensure the workflow fails on deployment errors

      - name: Verify Deployment
        env:
          SSH_HOST: ${{ secrets.EC2_HOST }}
        run: |
          sleep 20
          ssh ubuntu@$SSH_HOST 'docker ps | grep dayone-lunch-bot'
